
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if the user is signed in
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    // Helper function to check if the user has an admin role
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    // Users can read and write their own profile data. Admins can read any profile.
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow write: if isOwner(userId);
    }
    
    // Admins have full access to manage admin roles.
    match /roles_admin/{userId} {
      allow read, write: if isAdmin();
    }

    // Posts are public, but can only be created by signed-in users.
    // Content cannot be edited. Upvotes can be changed by any signed-in user.
    match /posts/{postId} {
      allow read: if isSignedIn();
      allow create: if isOwner(request.resource.data.authorId);
      allow update: if isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['upvotes']);
      allow delete: if isOwner(resource.data.authorId);

      // Comments subcollection: any signed-in user can create a comment.
      match /comments/{commentId} {
        allow create: if isSignedIn();
        allow read, update, delete: if false; // Comments are immutable by default
      }
    }

    // Rules for user-owned collections
    match /soil_reports/{reportId} {
      allow get: if isOwner(resource.data.userId);
      allow list: if isSignedIn() && request.query.where.userId == request.auth.uid;
      allow create: if isOwner(request.resource.data.userId);
    }

    match /scans/{scanId} {
      allow get: if isOwner(resource.data.userId);
      allow list: if isSignedIn() && request.query.where.userId == request.auth.uid;
      allow create: if isOwner(request.resource.data.userId);
    }

    match /yield_reports/{reportId} {
      allow get: if isOwner(resource.data.userId);
      allow list: if isSignedIn() && request.query.where.userId == request.auth.uid;
      allow create: if isOwner(request.resource.data.userId);
    }

    match /profit_reports/{reportId} {
      allow get: if isOwner(resource.data.userId);
      allow list: if isSignedIn() && request.query.where.userId == request.auth.uid;
      allow create: if isOwner(request.resource.data.userId);
    }
  }
}
