rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    match /{document=**} {
      allow read, write: if isSignedIn();
    }

    // More specific rules can be placed below, but the rule above will grant broad access.

    match /users/{userId} {
      allow read, write: if isOwner(userId) || isAdmin();
    }
    
    match /posts/{postId} {
      allow list, get: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      
      allow update: if isSignedIn() && (
        resource.data.authorId == request.auth.uid ||
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['upvotes', 'comments']) ||
        isAdmin()
      );
      
      allow delete: if isSignedIn() && (resource.data.authorId == request.auth.uid || isAdmin());
    }

    match /scans/{scanId} {
      allow read, write: if isSignedIn();
    }

    match /soil_reports/{reportId} {
      allow read, write: if isSignedIn();
    }

    match /yield_reports/{reportId} {
      allow read, write: if isSignedIn();
    }
    
    match /profit_reports/{reportId} {
      allow read, write: if isSignedIn();
    }

    match /roles_admin/{userId} {
        allow get: if true;
        allow list, create, update, delete: if false; // Tightly controlled
    }
  }
}
