
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // User profiles can be read by anyone, but only the user can write to their own profile.
    match /users/{userId} {
      allow read: if isSignedIn();
      allow write: if isOwner(userId);
    }
    
    // Admin roles are read-only for clients.
    match /roles_admin/{userId} {
        allow read, write: if false; // Should only be managed from a trusted backend server
    }

    // Posts can be read by anyone signed in.
    // Creation requires being signed in.
    // Updates are restricted to only 'upvotes'.
    // Deletion is restricted to the post owner.
    match /posts/{postId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['upvotes']);
      allow delete: if isOwner(resource.data.authorId);

      // Comments subcollection
      // Allow any signed-in user to create (comment).
      // Allow the comment owner to delete their own comment.
      match /comments/{commentId} {
        allow read: if isSignedIn();
        allow create: if isSignedIn();
        allow delete: if isOwner(resource.data.authorId);
      }
    }
    
    // All other user-specific data can only be read/written by the owner.
    match /soil_reports/{reportId} {
      allow read, write: if isOwner(request.resource.data.userId);
    }
    
    match /scans/{scanId} {
      allow read, write: if isOwner(request.resource.data.userId);
    }

    match /yield_reports/{reportId} {
      allow read, write: if isOwner(request.resource.data.userId);
    }
    
    match /profit_reports/{reportId} {
        allow read, write: if isOwner(request.resource.data.userId);
    }
  }
}
