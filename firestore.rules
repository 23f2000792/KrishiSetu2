rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if the user is signed in
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    // Helper function to check if the user has an admin role
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    // Users can read and write their own profile data. Admins can read any profile.
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow write: if isOwner(userId);
    }
    
    // Admins have full access to manage admin roles.
    match /roles_admin/{userId} {
      allow read, write: if isAdmin();
    }

    // Any authenticated user can create posts. Posts are publicly readable.
    // Only the author of a post can update or delete it.
    match /posts/{postId} {
      allow read, create: if isSignedIn();
      allow update, delete: if isOwner(resource.data.authorId);
    }
    
    // Generic rules for user-owned collections (soil_reports, scans, yield_reports, profit_reports)
    // A user can:
    // - Get a single document if they are the owner.
    // - List documents ONLY if they are querying for their own userId.
    // - Create, update, or delete a document if they are the owner.
    match /{collection}/{docId} 
      where collection in ['soil_reports', 'scans', 'yield_reports', 'profit_reports'] {
      allow get: if isOwner(resource.data.userId);
      allow list: if isSignedIn() && request.query.where.userId == request.auth.uid;
      allow write: if isOwner(request.resource.data.userId);
    }
  }
}
